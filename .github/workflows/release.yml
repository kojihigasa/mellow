name: release-binaries

on:
  push:
    tags:
      - "*" # Run on any tag push

permissions:
  contents: read

jobs:
  build:
    name: build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            use_cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            archive: tar.gz
            use_cross: true
          # macOS (build natively on each arch)
          - os: macos-13  # Intel runner
            target: x86_64-apple-darwin
            archive: tar.gz
            use_cross: false
          - os: macos-14  # Apple Silicon runner
            target: aarch64-apple-darwin
            archive: tar.gz
            use_cross: false
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            use_cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            archive: zip
            use_cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (if needed)
        if: matrix.use_cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build (release)
        if: runner.os != 'Windows'
        run: |
          set -euxo pipefail
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Build (release) [Windows]
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          # cross not used on Windows in this matrix
          cargo build --release --target ${{ matrix.target }}

      - name: Package (tar.gz)
        if: matrix.archive == 'tar.gz'
        run: |
          set -euxo pipefail
          BIN_NAME=mellow
          TARGET=${{ matrix.target }}
          VERSION=${GITHUB_REF_NAME}
          OUTDIR=dist
          STAGING="${BIN_NAME}-${VERSION}-${TARGET}"
          mkdir -p "${OUTDIR}" "${STAGING}"
          # Copy binary
          cp "target/${TARGET}/release/${BIN_NAME}" "${STAGING}/"
          # Optional extras
          [ -f README.md ] && cp README.md "${STAGING}/" || true
          [ -f LICENSE ] && cp LICENSE "${STAGING}/" || true
          # Strip to reduce size (best-effort)
          if command -v strip >/dev/null 2>&1; then strip "${STAGING}/${BIN_NAME}" || true; fi
          # Archive
          tar -czf "${OUTDIR}/${STAGING}.tar.gz" "${STAGING}"
          # Checksum
          (cd "${OUTDIR}" && shasum -a 256 "${STAGING}.tar.gz" > "${STAGING}.tar.gz.sha256")

      - name: Package (zip)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $BinName = 'mellow'
          $Target = '${{ matrix.target }}'
          $Version = '${{ github.ref_name }}'
          $OutDir = 'dist'
          $Staging = "$BinName-$Version-$Target"
          New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
          New-Item -ItemType Directory -Force -Path $Staging | Out-Null
          Copy-Item "target/$Target/release/$BinName.exe" "$Staging/"
          if (Test-Path 'README.md') { Copy-Item 'README.md' "$Staging/" }
          if (Test-Path 'LICENSE') { Copy-Item 'LICENSE' "$Staging/" }
          Compress-Archive -Path "$Staging/*" -DestinationPath "$OutDir/$Staging.zip"
          (Get-FileHash "$OutDir/$Staging.zip" -Algorithm SHA256).Hash + "  $OutDir/$Staging.zip" | Out-File "$OutDir/$Staging.zip.sha256" -Encoding ASCII

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*
          if-no-files-found: error

  publish:
    name: publish release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: release

      - name: List downloaded files
        run: |
          ls -la release

      - name: Generate aggregate checksums
        run: |
          set -euxo pipefail
          cd release
          shopt -s nullglob
          shasum -a 256 *.* > checksums.txt || true
          cd -

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            release/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
